<?php

namespace BC\PlatformBundle\Entity;

use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\Mapping as ORM;
use Gedmo\Mapping\Annotation as Gedmo;
use BC\PlatformBundle\Validator\Antiflood;
//Ajout du use validator pour la sécurité des form 07/02/10
use Symfony\Component\Validator\Constraints as Assert;
// Ajout du use pour invalider certains contenus 07/02/18
use Symfony\Component\Validator\Context\ExecutionContextInterface;
// Ajout du use pour utilisation de la contrainte
use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;

/**
 * Advert
 *
 * @ORM\Table(name="bc_advert")
 * @ORM\Entity(repositoryClass="BC\PlatformBundle\Repository\AdvertRepository")
 * @ORM\HasLifecycleCallbacks()
 *
 * @UniqueEntity(fields="title", message="Une annonce existe déjà avec ce titre.") // Modif du 07/02/18
 */
class Advert
{
    /**
     * @var int
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * @var \DateTime
     *
     * @ORM\Column(name="date", type="datetime")
     * @Assert\DateTime() // Modif du 07/02/18
     */
    private $date;

    /**
     * @var string
     *
     * @ORM\Column(name="title", type="string", length=255, unique=true) // Modif du 07/02/18
     * @Assert\Length(min=8) // Modif du 07/02/18
     */
    private $title;

    /**
     * @var string
     *
     * @ORM\Column(name="author", type="string", length=255)
     * @Assert\Length(min=2) // Modif du 07/02/18
     */
    private $author;

    /**
     * @var string
     *
     * @ORM\Column(name="content", type="text")
     * @Assert\NotBlank() // Modif du 07/02/18
     * @Antiflood() // Modif du 07/02/18
     */
    private $content;

    /**
     * @ORM\Column(name="published", type="boolean")
     */
    private $published = true;

    // Modif 06/02/18

    /**
     * @ORM\OneToOne(targetEntity="BC\PlatformBundle\Entity\Image", cascade={"persist", "remove"})
     * @Assert\Valid() // Modif du 07/02/18
     */
    private $image;

    /**
     * @ORM\ManyToMany(targetEntity="BC\PlatformBundle\Entity\Category", cascade={"persist"})
     * @ORM\JoinTable(name="bc_advert_category")
     */
    private $categories;

    /**
     * @ORM\OneToMany(targetEntity="BC\PlatformBundle\Entity\Application", mappedBy="advert")
     */
    private $applications; // Notez le « s », une annonce est liée à plusieurs candidatures

    /**
     * @ORM\Column(name="updated_at", type="datetime", nullable=true)
     */
    private $updatedAt;

    /**
     * @ORM\Column(name="nb_applications", type="integer")
     */
    private $nbApplications = 0;

    /**
     * @Gedmo\Slug(fields={"title"})
     * @ORM\Column(name="slug", type="string",length=255, unique=true)
     */
    private $slug;

    // modif datepicker 21/02/18

    /**
     * @var \DateTime
     *
     * @ORM\Column(name="startdate", type="datetime")
     * @Assert\DateTime()
     */
    private $startdate;

    /**
     * @var \DateTime
     *
     * @ORM\Column(name="enddate", type="datetime")
     * @Assert\DateTime()
     */
    private $enddate;

    /**
     * @var string
     * @ORM\Column(name="city", type="text")
     */
    private $city;

    public function __construct()
    {
        $this->date = new \Datetime();
        $this->categories = new ArrayCollection();
        $this->applications = new ArrayCollection();
    }

    /**
     * @ORM\PreUpdate
     */
    public function updateDate()
    {
        $this->setUpdatedAt(new \Datetime());
    }

    public function increaseApplication()
    {
        $this->nbApplications++;
    }

    public function decreaseApplication()
    {
        $this->nbApplications--;
    }

    // Modif du 07/02/16
    /*
     * @Assert\Callback
     */
    public function isContenValid(ExecutionContextInterface $context)
    {
        $forbiddenWords = array('merde', 'putain');

        // On vérifie que le contenu ne contient pas ces mots
        if (preg_match('#'.implode('|', $forbiddenWords).'#', $this->getContent())) {
            // Si la régle est enfreind, on définit l'erreur
            $context
                ->buildViolation('Contenu invalidé car mot interdit.')
                ->atPath('content') // Attribut de l'objet enfreind
                ->addViolation(); // déclenche l'erreur NE PAS OUBLIER
        }
    }
    /**
     * Get id
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set date
     *
     * @param \DateTime $date
     *
     * @return Advert
     */
    public function setDate($date)
    {
        $this->date = $date;
        return $this;
    }

    /**
     * Get date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->date;
    }

    /**
     * Set title
     *
     * @param string $title
     *
     * @return Advert
     */
    public function setTitle($title)
    {
        $this->title = $title;
        return $this;
    }

    /**
     * Get title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->title;
    }

    /**
     * Set author
     *
     * @param string $author
     *
     * @return Advert
     */
    public function setAuthor($author)
    {
        $this->author = $author;
        return $this;
    }

    /**
     * Get author
     *
     * @return string
     */
    public function getAuthor()
    {
        return $this->author;
    }

    /**
     * Set content
     *
     * @param string $content
     *
     * @return Advert
     */
    public function setContent($content)
    {
        $this->content = $content;
        return $this;
    }

    /**
     * Get content
     *
     * @return string
     */
    public function getContent()
    {
        return $this->content;
    }

    /**
     * Set published
     *
     * @param boolean $published
     *
     * @return Advert
     */
    public function setPublished($published)
    {
        $this->published = $published;
        return $this;
    }

    /**
     * Get published
     *
     * @return boolean
     */
    public function getPublished()
    {
        return $this->published;
    }

    /**
     * Set image
     *
     * @param \BC\PlatformBundle\Entity\Image $image
     *
     * @return Advert
     */
    public function setImage(\BC\PlatformBundle\Entity\Image $image = null)
    {
        $this->image = $image;
        return $this;
    }

    /**
     * Get image
     *
     * @return \BC\PlatformBundle\Entity\Image
     */
    public function getImage()
    {
        return $this->image;
    }

    /**
     * Add category
     *
     * @param \BC\PlatformBundle\Entity\Category $category
     *
     * @return Advert
     */
    public function addCategory(\BC\PlatformBundle\Entity\Category $category)
    {
        $this->categories[] = $category;
        return $this;
    }

    /**
     * Remove category
     *
     * @param \BC\PlatformBundle\Entity\Category $category
     */
    public function removeCategory(\BC\PlatformBundle\Entity\Category $category)
    {
        $this->categories->removeElement($category);
    }

    /**
     * Get categories
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getCategories()
    {
        return $this->categories;
    }

    /**
     * Add application
     *
     * @param \BC\PlatformBundle\Entity\Application $application
     *
     * @return Advert
     */
    public function addApplication(\BC\PlatformBundle\Entity\Application $application)
    {
        $this->applications[] = $application;
        // On lie l'annonce à la candidature
        $application->setAdvert($this);
        return $this;
    }

    /**
     * Remove application
     *
     * @param \BC\PlatformBundle\Entity\Application $application
     */
    public function removeApplication(\BC\PlatformBundle\Entity\Application $application)
    {
        $this->applications->removeElement($application);
    }

    /**
     * Get applications
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getApplications()
    {
        return $this->applications;
    }

    /**
     * Set updatedAt
     *
     * @param \DateTime $updatedAt
     *
     * @return Advert
     */
    public function setUpdatedAt($updatedAt)
    {
        $this->updatedAt = $updatedAt;
        return $this;
    }

    /**
     * Get updatedAt
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->updatedAt;
    }

    /**
     * Set nbApplications
     *
     * @param integer $nbApplications
     *
     * @return Advert
     */
    public function setNbApplications($nbApplications)
    {
        $this->nbApplications = $nbApplications;
        return $this;
    }

    /**
     * Get nbApplications
     *
     * @return integer
     */
    public function getNbApplications()
    {
        return $this->nbApplications;
    }

    /**
     * Set slug
     *
     * @param string $slug
     *
     * @return Advert
     */
    public function setSlug($slug)
    {
        $this->slug = $slug;

        return $this;
    }

    /**
     * Get slug
     *
     * @return string
     */
    public function getSlug()
    {
        return $this->slug;
    }

    /**
     * Set startdate
     *
     * @param \DateTime $startdate
     *
     * @return Advert
     */
    public function setStartdate($startdate)
    {
        $this->startdate = $startdate;

        return $this;
    }

    /**
     * Get startdate
     *
     * @return \DateTime
     */
    public function getStartdate()
    {
        return $this->startdate;
    }

    /**
     * Set enddate
     *
     * @param \DateTime $enddate
     *
     * @return Advert
     */
    public function setEnddate($enddate)
    {
        $this->enddate = $enddate;

        return $this;
    }

    /**
     * Get enddate
     *
     * @return \DateTime
     */
    public function getEnddate()
    {
        return $this->enddate;
    }

    public function __toString()
    {
        return (string) $this->getStartdate($this->startdate);
    }
}
